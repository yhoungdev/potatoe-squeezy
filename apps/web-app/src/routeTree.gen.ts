/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as IndexImport } from "./routes/index";
import { Route as AppIndexImport } from "./routes/app/index";
import { Route as StatusSuccessImport } from "./routes/status/success";
import { Route as AppProfileImport } from "./routes/app/profile";
import { Route as AppExploreImport } from "./routes/app/explore";

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AppIndexRoute = AppIndexImport.update({
  id: "/app/",
  path: "/app/",
  getParentRoute: () => rootRoute,
} as any);

const StatusSuccessRoute = StatusSuccessImport.update({
  id: "/status/success",
  path: "/status/success",
  getParentRoute: () => rootRoute,
} as any);

const AppProfileRoute = AppProfileImport.update({
  id: "/app/profile",
  path: "/app/profile",
  getParentRoute: () => rootRoute,
} as any);

const AppExploreRoute = AppExploreImport.update({
  id: "/app/explore",
  path: "/app/explore",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/app/explore": {
      id: "/app/explore";
      path: "/app/explore";
      fullPath: "/app/explore";
      preLoaderRoute: typeof AppExploreImport;
      parentRoute: typeof rootRoute;
    };
    "/app/profile": {
      id: "/app/profile";
      path: "/app/profile";
      fullPath: "/app/profile";
      preLoaderRoute: typeof AppProfileImport;
      parentRoute: typeof rootRoute;
    };
    "/status/success": {
      id: "/status/success";
      path: "/status/success";
      fullPath: "/status/success";
      preLoaderRoute: typeof StatusSuccessImport;
      parentRoute: typeof rootRoute;
    };
    "/app/": {
      id: "/app/";
      path: "/app";
      fullPath: "/app";
      preLoaderRoute: typeof AppIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/app/explore": typeof AppExploreRoute;
  "/app/profile": typeof AppProfileRoute;
  "/status/success": typeof StatusSuccessRoute;
  "/app": typeof AppIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/app/explore": typeof AppExploreRoute;
  "/app/profile": typeof AppProfileRoute;
  "/status/success": typeof StatusSuccessRoute;
  "/app": typeof AppIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/app/explore": typeof AppExploreRoute;
  "/app/profile": typeof AppProfileRoute;
  "/status/success": typeof StatusSuccessRoute;
  "/app/": typeof AppIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/app/explore" | "/app/profile" | "/status/success" | "/app";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/app/explore" | "/app/profile" | "/status/success" | "/app";
  id:
    | "__root__"
    | "/"
    | "/app/explore"
    | "/app/profile"
    | "/status/success"
    | "/app/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AppExploreRoute: typeof AppExploreRoute;
  AppProfileRoute: typeof AppProfileRoute;
  StatusSuccessRoute: typeof StatusSuccessRoute;
  AppIndexRoute: typeof AppIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppExploreRoute: AppExploreRoute,
  AppProfileRoute: AppProfileRoute,
  StatusSuccessRoute: StatusSuccessRoute,
  AppIndexRoute: AppIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app/explore",
        "/app/profile",
        "/status/success",
        "/app/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app/explore": {
      "filePath": "app/explore.tsx"
    },
    "/app/profile": {
      "filePath": "app/profile.tsx"
    },
    "/status/success": {
      "filePath": "status/success.tsx"
    },
    "/app/": {
      "filePath": "app/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
